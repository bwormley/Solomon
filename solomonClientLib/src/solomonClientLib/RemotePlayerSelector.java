/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package solomonClientLib;

import javax.swing.ListModel;
import solomonserver.PlayerEntry;
import solomonserver.ResultCode;

/**
 *
 * @author bwormley
 */
public class RemotePlayerSelector extends javax.swing.JFrame {

    /**
     * Creates new form RemotePlayerSelector
     */
    public RemotePlayerSelector() {
        initComponents();
    }
    
    ListModel listModel = (ListModel)RemotePlayerList.getInstance();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        playerListbox = new javax.swing.JList();
        inviteToPlayButton = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        acceptInvitationButton = new javax.swing.JButton();
        remoteInvitationText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Remote Players");

        playerListbox.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        playerListbox.setModel(listModel);
        playerListbox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                playerListboxValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(playerListbox);

        inviteToPlayButton.setText("Invite To Play");
        inviteToPlayButton.setEnabled(false);
        inviteToPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteToPlayButtonActionPerformed(evt);
            }
        });

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        acceptInvitationButton.setText("Accept Invitation");
        acceptInvitationButton.setEnabled(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 429, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(remoteInvitationText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 429, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(Cancel)
                .add(49, 49, 49)
                .add(acceptInvitationButton)
                .add(6, 6, 6)
                .add(inviteToPlayButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(12, 12, 12)
                .add(remoteInvitationText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Cancel)
                    .add(acceptInvitationButton)
                    .add(inviteToPlayButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playerListboxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_playerListboxValueChanged
       if (evt.getValueIsAdjusting()==false) {
           if (playerListbox.getSelectedIndex() == -1) {
               inviteToPlayButton.setEnabled(false);
          } else {
             inviteToPlayButton.setEnabled(true);
          }
       }
    }//GEN-LAST:event_playerListboxValueChanged

    public static PlayerEntry opponentPlayer;
    public PlayerEntry getOpponentPlayer() { return opponentPlayer; }
    private void inviteToPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteToPlayButtonActionPerformed
        int playerID = ((PlayerEntry)playerListbox.getSelectedValue()).id;
        ResultCode rc = Server.getInstance().requestRemoteMatch(playerID, Server.getInstance().numberOfRounds);
        if (rc==ResultCode.RC_OK) {
            opponentPlayer = (PlayerEntry)playerListbox.getSelectedValue();
            dispose();
        }
    }//GEN-LAST:event_inviteToPlayButtonActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_CancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RemotePlayerSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RemotePlayerSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RemotePlayerSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RemotePlayerSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new RemotePlayerSelector().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JButton acceptInvitationButton;
    private javax.swing.JButton inviteToPlayButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList playerListbox;
    private javax.swing.JTextField remoteInvitationText;
    // End of variables declaration//GEN-END:variables
}
